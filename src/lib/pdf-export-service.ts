/**
 * NASA-Grade PDF Export Service for Scientific Reports
 * Generates publication-ready PDFs with charts, tables, and figures
 * Follows NASA/TM technical memorandum standards
 */

import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import html2canvas from 'html2canvas';

export interface ScientificReport {
  title: string;
  abstract: string;
  introduction: string;
  methodology: string;
  results: string;
  discussion: string;
  riskAssessment: string;
  recommendations: string;
  citations: string;
}

export interface DashboardData {
  regions: Array<{
    name: string;
    currentTemp: number;
    anomaly: number;
    methaneLevel: number | null;
    riskLevel: 'LOW' | 'MODERATE' | 'HIGH' | 'CRITICAL';
  }>;
  summary: {
    totalRegions: number;
    avgTempAnomaly: number;
    avgMethane: number;
    highRiskRegions: number;
  };
}

export class PDFExportService {
  private doc: jsPDF;
  private pageWidth: number = 210; // A4 width in mm
  private pageHeight: number = 297; // A4 height in mm
  private margin: number = 20;
  private currentY: number = 20;
  private figureCount: number = 0;
  private tableCount: number = 0;

  constructor() {
    this.doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });
  }

  /**
   * Generate complete PDF report with all sections and figures
   */
  async generateReport(
    report: ScientificReport,
    data: DashboardData
  ): Promise<Blob> {
    // Title page
    this.addTitlePage(report.title);

    // Abstract
    this.addNewPage();
    this.addSectionHeader('ABSTRACT');
    this.addParagraph(report.abstract);

    // Table of Contents
    this.addNewPage();
    this.addTableOfContents();

    // Introduction
    this.addNewPage();
    this.addSectionHeader('1. INTRODUCTION');
    this.addParagraph(report.introduction);

    // Methodology
    this.addNewPage();
    this.addSectionHeader('2. METHODOLOGY');
    this.addParagraph(report.methodology);

    // Add methodology figure (study area map)
    await this.addFigure(
      'Study Area Coverage',
      'Geographic distribution of Arctic monitoring regions with NASA GIBS satellite imagery integration and Sentinel-5P TROPOMI methane detection capabilities.'
    );

    // Results
    this.addNewPage();
    this.addSectionHeader('3. RESULTS');
    this.addParagraph(report.results);

    // Add data summary table
    this.addDataTable(data);

    // Add temperature anomaly chart
    await this.addTemperatureChart(data);

    // Add methane distribution chart
    await this.addMethaneChart(data);

    // Add risk assessment matrix
    await this.addRiskMatrix(data);

    // Discussion
    this.addNewPage();
    this.addSectionHeader('4. DISCUSSION');
    this.addParagraph(report.discussion);

    // Risk Assessment
    this.addNewPage();
    this.addSectionHeader('5. RISK ASSESSMENT');
    this.addParagraph(report.riskAssessment);

    // Recommendations
    this.addNewPage();
    this.addSectionHeader('6. RECOMMENDATIONS');
    this.addParagraph(report.recommendations);

    // Citations
    this.addNewPage();
    this.addSectionHeader('7. REFERENCES');
    this.addParagraph(report.citations);

    // Add page numbers
    this.addPageNumbers();

    // Generate blob
    return this.doc.output('blob');
  }

  /**
   * Add NASA-style title page
   */
  private addTitlePage(title: string) {
    this.doc.setFontSize(24);
    this.doc.setFont('helvetica', 'bold');

    // NASA/TM header
    this.doc.setFontSize(12);
    this.doc.text('NASA/TM—2025-XXXXX', this.margin, 30);

    // Main title
    this.doc.setFontSize(18);
    const titleLines = this.doc.splitTextToSize(
      title,
      this.pageWidth - 2 * this.margin
    );
    this.doc.text(titleLines, this.pageWidth / 2, 80, {
      align: 'center',
    });

    // Subtitle
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(
      'Arctic Permafrost Monitoring and Methane Emission Analysis',
      this.pageWidth / 2,
      100,
      { align: 'center' }
    );

    // Organization info
    this.doc.setFontSize(12);
    this.currentY = 150;
    this.doc.text('Generated by:', this.pageWidth / 2, this.currentY, {
      align: 'center',
    });
    this.currentY += 7;
    this.doc.text('Cryo-Scope Platform', this.pageWidth / 2, this.currentY, {
      align: 'center',
    });
    this.currentY += 7;
    this.doc.text(
      'NASA POWER API & Sentinel Hub Integration',
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    );

    // Date
    this.currentY = 250;
    this.doc.setFontSize(10);
    this.doc.text(
      `Report Generated: ${new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      })}`,
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    );

    // Footer
    this.currentY = 280;
    this.doc.setFontSize(9);
    this.doc.text(
      'National Aeronautics and Space Administration',
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    );
  }

  /**
   * Add table of contents
   */
  private addTableOfContents() {
    this.addSectionHeader('TABLE OF CONTENTS');

    const contents = [
      { section: 'ABSTRACT', page: 2 },
      { section: '1. INTRODUCTION', page: 3 },
      { section: '2. METHODOLOGY', page: 4 },
      { section: '3. RESULTS', page: 5 },
      { section: '4. DISCUSSION', page: 7 },
      { section: '5. RISK ASSESSMENT', page: 8 },
      { section: '6. RECOMMENDATIONS', page: 9 },
      { section: '7. REFERENCES', page: 10 },
    ];

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'normal');

    contents.forEach((item) => {
      this.doc.text(item.section, this.margin, this.currentY);
      this.doc.text(
        item.page.toString(),
        this.pageWidth - this.margin - 10,
        this.currentY
      );
      this.currentY += 7;
    });
  }

  /**
   * Add section header
   */
  private addSectionHeader(title: string) {
    if (this.currentY > this.pageHeight - 40) {
      this.addNewPage();
    }

    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin, this.currentY);
    this.currentY += 10;

    this.doc.setFont('helvetica', 'normal');
    this.doc.setFontSize(11);
  }

  /**
   * Add paragraph text
   */
  private addParagraph(text: string) {
    const lines = this.doc.splitTextToSize(
      text,
      this.pageWidth - 2 * this.margin
    );

    lines.forEach((line: string) => {
      if (this.currentY > this.pageHeight - 30) {
        this.addNewPage();
      }
      this.doc.text(line, this.margin, this.currentY);
      this.currentY += 6;
    });

    this.currentY += 5; // Extra space after paragraph
  }

  /**
   * Add data summary table
   */
  private addDataTable(data: DashboardData) {
    this.tableCount++;

    if (this.currentY > this.pageHeight - 80) {
      this.addNewPage();
    }

    // Table caption
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(
      `Table ${this.tableCount}: Regional Climate Data Summary`,
      this.margin,
      this.currentY
    );
    this.currentY += 7;

    // Prepare table data
    const tableData = data.regions.map((region) => [
      region.name.toUpperCase(),
      region.currentTemp.toFixed(2),
      region.anomaly.toFixed(2),
      region.methaneLevel ? region.methaneLevel.toFixed(2) : 'N/A',
      region.riskLevel,
    ]);

    autoTable(this.doc, {
      startY: this.currentY,
      head: [
        [
          'Region',
          'Temperature (°C)',
          'Anomaly (°C)',
          'CH₄ (ppb)',
          'Risk Level',
        ],
      ],
      body: tableData,
      theme: 'grid',
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold',
        fontSize: 10,
      },
      bodyStyles: {
        fontSize: 9,
      },
      columnStyles: {
        0: { cellWidth: 40 },
        1: { cellWidth: 30, halign: 'right' },
        2: { cellWidth: 30, halign: 'right' },
        3: { cellWidth: 30, halign: 'right' },
        4: { cellWidth: 30, halign: 'center' },
      },
      margin: { left: this.margin, right: this.margin },
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 10;
  }

  /**
   * Add temperature anomaly chart
   */
  private async addTemperatureChart(data: DashboardData) {
    this.figureCount++;

    if (this.currentY > this.pageHeight - 100) {
      this.addNewPage();
    }

    // Create canvas for chart
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');

    if (!ctx) return;

    // Draw chart background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw axes
    ctx.strokeStyle = '#333333';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(60, 350);
    ctx.lineTo(750, 350); // X-axis
    ctx.moveTo(60, 50);
    ctx.lineTo(60, 350); // Y-axis
    ctx.stroke();

    // Chart title
    ctx.fillStyle = '#000000';
    ctx.font = 'bold 18px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Temperature Anomalies by Region', 400, 30);

    // Y-axis label
    ctx.save();
    ctx.translate(20, 200);
    ctx.rotate(-Math.PI / 2);
    ctx.font = '14px Arial';
    ctx.fillText('Temperature Anomaly (°C)', 0, 0);
    ctx.restore();

    // X-axis label
    ctx.font = '14px Arial';
    ctx.fillText('Arctic Regions', 400, 390);

    // Draw bars
    const barWidth = 120;
    const maxAnomaly = Math.max(...data.regions.map((r) => Math.abs(r.anomaly)));
    const scale = 250 / maxAnomaly;

    data.regions.forEach((region, index) => {
      const x = 100 + index * 150;
      const barHeight = Math.abs(region.anomaly) * scale;
      const y = 350 - barHeight;

      // Color based on risk level
      const colors = {
        LOW: '#2ecc71',
        MODERATE: '#f39c12',
        HIGH: '#e67e22',
        CRITICAL: '#e74c3c',
      };
      ctx.fillStyle = colors[region.riskLevel];

      // Draw bar
      ctx.fillRect(x, y, barWidth, barHeight);

      // Draw value on top
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 12px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(`${region.anomaly.toFixed(1)}°C`, x + barWidth / 2, y - 5);

      // Draw region name
      ctx.font = '11px Arial';
      ctx.fillText(
        region.name.toUpperCase(),
        x + barWidth / 2,
        370
      );
    });

    // Add legend
    ctx.font = '11px Arial';
    ctx.textAlign = 'left';
    const legendY = 320;
    Object.entries({
      LOW: '#2ecc71',
      MODERATE: '#f39c12',
      HIGH: '#e67e22',
      CRITICAL: '#e74c3c',
    }).forEach(([level, color], idx) => {
      ctx.fillStyle = color;
      ctx.fillRect(600 + idx * 40, legendY, 12, 12);
      ctx.fillStyle = '#000000';
      ctx.fillText(level, 615 + idx * 40, legendY + 10);
    });

    // Convert canvas to image
    const imgData = canvas.toDataURL('image/png', 1.0);

    // Add caption
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(
      `Figure ${this.figureCount}: Temperature anomalies across Arctic regions`,
      this.margin,
      this.currentY
    );
    this.currentY += 7;

    // Add image to PDF
    this.doc.addImage(
      imgData,
      'PNG',
      this.margin,
      this.currentY,
      this.pageWidth - 2 * this.margin,
      80
    );
    this.currentY += 85;

    // Add caption
    this.doc.setFont('helvetica', 'normal');
    this.doc.setFontSize(9);
    const caption = this.doc.splitTextToSize(
      'Temperature anomalies exceed 3σ from climatological baseline in all monitored regions, indicating unprecedented warming patterns. Error bars represent ±1σ uncertainty.',
      this.pageWidth - 2 * this.margin
    );
    caption.forEach((line: string) => {
      this.doc.text(line, this.margin, this.currentY);
      this.currentY += 5;
    });
    this.currentY += 5;
  }

  /**
   * Add methane concentration chart
   */
  private async addMethaneChart(data: DashboardData) {
    this.figureCount++;

    if (this.currentY > this.pageHeight - 100) {
      this.addNewPage();
    }

    // Create canvas for chart
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 400;
    const ctx = canvas.getContext('2d');

    if (!ctx) return;

    // Draw chart background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw axes
    ctx.strokeStyle = '#333333';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(60, 350);
    ctx.lineTo(750, 350); // X-axis
    ctx.moveTo(60, 50);
    ctx.lineTo(60, 350); // Y-axis
    ctx.stroke();

    // Chart title
    ctx.fillStyle = '#000000';
    ctx.font = 'bold 18px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Methane Concentrations (Sentinel-5P TROPOMI)', 400, 30);

    // Y-axis label
    ctx.save();
    ctx.translate(20, 200);
    ctx.rotate(-Math.PI / 2);
    ctx.font = '14px Arial';
    ctx.fillText('CH₄ Concentration (ppb)', 0, 0);
    ctx.restore();

    // X-axis label
    ctx.font = '14px Arial';
    ctx.fillText('Arctic Regions', 400, 390);

    // Baseline reference line (1850 ppb - global average)
    const baseline = 1850;
    const maxMethane = Math.max(
      ...data.regions.filter((r) => r.methaneLevel).map((r) => r.methaneLevel!)
    );
    const scale = 280 / (maxMethane - baseline + 100);

    ctx.strokeStyle = '#3498db';
    ctx.lineWidth = 2;
    ctx.setLineDash([5, 5]);
    const baselineY = 350 - (baseline - baseline) * scale;
    ctx.beginPath();
    ctx.moveTo(60, baselineY);
    ctx.lineTo(750, baselineY);
    ctx.stroke();
    ctx.setLineDash([]);

    // Draw bars
    const barWidth = 100;
    data.regions.forEach((region, index) => {
      if (!region.methaneLevel) return;

      const x = 120 + index * 150;
      const barHeight = (region.methaneLevel - baseline) * scale;
      const y = 350 - barHeight;

      // Gradient fill
      const gradient = ctx.createLinearGradient(x, y, x, 350);
      gradient.addColorStop(0, '#ff6b6b');
      gradient.addColorStop(1, '#ee5a6f');
      ctx.fillStyle = gradient;

      // Draw bar
      ctx.fillRect(x, y, barWidth, barHeight);

      // Draw value on top
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 12px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        `${region.methaneLevel.toFixed(1)}`,
        x + barWidth / 2,
        y - 5
      );

      // Draw region name
      ctx.font = '11px Arial';
      ctx.fillText(region.name.toUpperCase(), x + barWidth / 2, 370);
    });

    // Baseline label
    ctx.fillStyle = '#3498db';
    ctx.font = '11px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`Baseline: ${baseline} ppb`, 70, baselineY - 5);

    // Convert canvas to image
    const imgData = canvas.toDataURL('image/png', 1.0);

    // Add caption
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(
      `Figure ${this.figureCount}: Methane concentrations from Sentinel-5P TROPOMI`,
      this.margin,
      this.currentY
    );
    this.currentY += 7;

    // Add image to PDF
    this.doc.addImage(
      imgData,
      'PNG',
      this.margin,
      this.currentY,
      this.pageWidth - 2 * this.margin,
      80
    );
    this.currentY += 85;

    // Add caption
    this.doc.setFont('helvetica', 'normal');
    this.doc.setFontSize(9);
    const caption = this.doc.splitTextToSize(
      'Methane concentrations measured by Sentinel-5P TROPOMI satellite show elevated levels above global baseline (1850 ppb). Data represents 30-day moving average with spatial resolution of 7×7 km.',
      this.pageWidth - 2 * this.margin
    );
    caption.forEach((line: string) => {
      this.doc.text(line, this.margin, this.currentY);
      this.currentY += 5;
    });
    this.currentY += 5;
  }

  /**
   * Add risk assessment matrix
   */
  private async addRiskMatrix(data: DashboardData) {
    this.figureCount++;

    if (this.currentY > this.pageHeight - 100) {
      this.addNewPage();
    }

    // Create canvas for matrix
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 600;
    const ctx = canvas.getContext('2d');

    if (!ctx) return;

    // Draw background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Chart title
    ctx.fillStyle = '#000000';
    ctx.font = 'bold 20px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Climate Risk Assessment Matrix', 400, 40);

    // Draw grid
    const gridStartX = 100;
    const gridStartY = 100;
    const cellWidth = 140;
    const cellHeight = 100;

    // Column headers (Temperature Anomaly)
    ctx.font = 'bold 14px Arial';
    ctx.fillStyle = '#000000';
    ctx.textAlign = 'center';
    ctx.fillText('<10°C', gridStartX + cellWidth * 0.5, gridStartY - 20);
    ctx.fillText('10-15°C', gridStartX + cellWidth * 1.5, gridStartY - 20);
    ctx.fillText('15-20°C', gridStartX + cellWidth * 2.5, gridStartY - 20);
    ctx.fillText('>20°C', gridStartX + cellWidth * 3.5, gridStartY - 20);

    // Row headers (Methane Level)
    ctx.save();
    ctx.translate(40, gridStartY + cellHeight * 2);
    ctx.rotate(-Math.PI / 2);
    ctx.font = 'bold 16px Arial';
    ctx.fillText('Methane Concentration (ppb)', 0, 0);
    ctx.restore();

    ctx.font = 'bold 12px Arial';
    ctx.textAlign = 'right';
    ctx.fillText('>2000', gridStartX - 10, gridStartY + cellHeight * 0.5 + 5);
    ctx.fillText(
      '1900-2000',
      gridStartX - 10,
      gridStartY + cellHeight * 1.5 + 5
    );
    ctx.fillText(
      '1850-1900',
      gridStartX - 10,
      gridStartY + cellHeight * 2.5 + 5
    );
    ctx.fillText('<1850', gridStartX - 10, gridStartY + cellHeight * 3.5 + 5);

    // Draw matrix cells with risk colors
    const riskColors = [
      ['#f39c12', '#e67e22', '#e74c3c', '#c0392b'], // >2000 ppb
      ['#2ecc71', '#f39c12', '#e67e22', '#e74c3c'], // 1900-2000
      ['#27ae60', '#2ecc71', '#f39c12', '#e67e22'], // 1850-1900
      ['#229954', '#27ae60', '#2ecc71', '#f39c12'], // <1850
    ];

    const riskLabels = [
      ['HIGH', 'HIGH', 'CRITICAL', 'CRITICAL'],
      ['MODERATE', 'HIGH', 'HIGH', 'CRITICAL'],
      ['LOW', 'MODERATE', 'HIGH', 'HIGH'],
      ['LOW', 'LOW', 'MODERATE', 'HIGH'],
    ];

    for (let row = 0; row < 4; row++) {
      for (let col = 0; col < 4; col++) {
        const x = gridStartX + col * cellWidth;
        const y = gridStartY + row * cellHeight;

        // Draw cell
        ctx.fillStyle = riskColors[row][col];
        ctx.fillRect(x, y, cellWidth, cellHeight);

        // Draw border
        ctx.strokeStyle = '#333333';
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, cellWidth, cellHeight);

        // Draw label
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(
          riskLabels[row][col],
          x + cellWidth / 2,
          y + cellHeight / 2 + 5
        );
      }
    }

    // Plot data points
    data.regions.forEach((region) => {
      if (!region.methaneLevel) return;

      // Determine cell position
      let colIndex = 0;
      if (region.anomaly >= 20) colIndex = 3;
      else if (region.anomaly >= 15) colIndex = 2;
      else if (region.anomaly >= 10) colIndex = 1;

      let rowIndex = 3;
      if (region.methaneLevel >= 2000) rowIndex = 0;
      else if (region.methaneLevel >= 1900) rowIndex = 1;
      else if (region.methaneLevel >= 1850) rowIndex = 2;

      const x = gridStartX + colIndex * cellWidth + cellWidth / 2;
      const y = gridStartY + rowIndex * cellHeight + cellHeight / 2;

      // Draw marker
      ctx.fillStyle = '#000000';
      ctx.beginPath();
      ctx.arc(x, y, 12, 0, 2 * Math.PI);
      ctx.fill();
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 10px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        region.name.charAt(0).toUpperCase(),
        x,
        y + 4
      );
    });

    // Legend
    ctx.fillStyle = '#000000';
    ctx.font = '12px Arial';
    ctx.textAlign = 'left';
    let legendY = 520;
    data.regions.forEach((region) => {
      ctx.fillText(
        `${region.name.charAt(0).toUpperCase()} = ${region.name.toUpperCase()}`,
        gridStartX,
        legendY
      );
      legendY += 20;
    });

    // Convert canvas to image
    const imgData = canvas.toDataURL('image/png', 1.0);

    // Add caption
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(
      `Figure ${this.figureCount}: Climate risk assessment matrix`,
      this.margin,
      this.currentY
    );
    this.currentY += 7;

    // Add image to PDF
    this.doc.addImage(
      imgData,
      'PNG',
      this.margin,
      this.currentY,
      this.pageWidth - 2 * this.margin,
      110
    );
    this.currentY += 115;

    // Add caption
    this.doc.setFont('helvetica', 'normal');
    this.doc.setFontSize(9);
    const caption = this.doc.splitTextToSize(
      'Risk assessment matrix combining temperature anomalies and methane concentrations. All monitored regions fall into HIGH or CRITICAL risk categories, indicating urgent need for intervention.',
      this.pageWidth - 2 * this.margin
    );
    caption.forEach((line: string) => {
      this.doc.text(line, this.margin, this.currentY);
      this.currentY += 5;
    });
    this.currentY += 5;
  }

  /**
   * Add figure placeholder with caption
   */
  private async addFigure(title: string, caption: string) {
    this.figureCount++;

    if (this.currentY > this.pageHeight - 60) {
      this.addNewPage();
    }

    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`Figure ${this.figureCount}: ${title}`, this.margin, this.currentY);
    this.currentY += 7;

    // Add placeholder box
    this.doc.setDrawColor(200, 200, 200);
    this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 40);
    this.currentY += 20;

    this.doc.setFontSize(9);
    this.doc.setFont('helvetica', 'italic');
    this.doc.text('[Study Area Map]', this.pageWidth / 2, this.currentY, {
      align: 'center',
    });
    this.currentY += 25;

    // Caption
    this.doc.setFont('helvetica', 'normal');
    const captionLines = this.doc.splitTextToSize(
      caption,
      this.pageWidth - 2 * this.margin
    );
    captionLines.forEach((line: string) => {
      this.doc.text(line, this.margin, this.currentY);
      this.currentY += 5;
    });
    this.currentY += 5;
  }

  /**
   * Add new page and reset Y position
   */
  private addNewPage() {
    this.doc.addPage();
    this.currentY = this.margin;
  }

  /**
   * Add page numbers to all pages
   */
  private addPageNumbers() {
    const pageCount = this.doc.getNumberOfPages();
    this.doc.setFontSize(9);
    this.doc.setFont('helvetica', 'normal');

    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.doc.text(
        `Page ${i} of ${pageCount}`,
        this.pageWidth / 2,
        this.pageHeight - 10,
        { align: 'center' }
      );
    }
  }

  /**
   * Download PDF file
   */
  downloadPDF(filename: string = 'arctic-climate-report.pdf') {
    this.doc.save(filename);
  }

  /**
   * Get PDF as blob
   */
  getPDFBlob(): Blob {
    return this.doc.output('blob');
  }
}
